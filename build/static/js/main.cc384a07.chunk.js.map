{"version":3,"sources":["containers/List/index.jsx","components/Table.jsx","components/Loading.jsx","pages/List/index.jsx","models/List.js","models/Store.js","App.js","serviceWorker.js","index.js"],"names":["ListContainer","state","loading","requestListData","a","store","props","setState","list","requestData","alert","this","children","React","Component","inject","observer","useStyles","createUseStyles","table","margin","border","background","listItems","data","length","useState","property","increase","sortCondition","setSortCondition","classes","properties","Object","keys","sortedItems","useMemo","sorted","slice","sort","reverse","className","map","currentProperty","index","key","onClick","currentListItem","root","fontSize","List","Loading","Table","ListItem","t","model","id","number","firstName","string","lastName","email","phone","description","address","optional","array","actions","self","flow","argument","axios","get","response","dataItem","create","streetAddress","Store","routes","ListPage","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAGMA,E,4MACLC,MAAQ,CACPC,SAAS,G,EAOVC,gB,sBAAkB,4BAAAC,EAAA,6DACVC,EAAS,EAAKC,MAAdD,MADU,SAIhB,EAAKE,SAAS,CAACL,SAAS,IAJR,SAMVG,EAAMG,KAAKC,cAND,uDAQhBC,MAAM,+RARU,yBAUhB,EAAKH,SAAS,CAACL,SAAS,IAVR,4E,kEAHjBS,KAAKR,oB,+BAkBL,OAAOQ,KAAKL,MAAMM,SAAS,CAC1BV,QAASS,KAAKV,MAAMC,c,GAzBKW,IAAMC,WA8BnBC,cAAO,QAAPA,CAAgBC,YAAShB,I,QC9BlCiB,EAAYC,YAAgB,CACjCC,MAAO,CACNC,OAAQ,GAER,UAAW,CACVC,OAAQ,iBACRD,OAAQ,EAER,UAAW,CACVE,WAAY,eAMD,cAAwB,IAAhBC,EAAe,EAArBC,KAChB,IAAKD,IAAcA,EAAUE,OAC5B,OAAO,KAF6B,MAKKC,mBAAS,CAClDC,SAAU,KACVC,UAAU,IAP0B,mBAK9BC,EAL8B,KAKfC,EALe,KAU/BC,EAAUd,IACVe,EAAaC,OAAOC,KAAKX,EAAU,IACnCY,EAAcC,mBAAQ,WAC3B,IAAKP,EAAe,OAAON,EAE3B,IAAMc,EAASd,EAAUe,QAAQC,OAEjC,OAAOV,EAAcD,SAAWS,EAASA,EAAOG,YAC9C,CAACX,EAAeN,IAEnB,OACC,2BAAOkB,UAAWV,EAAQZ,OACzB,+BACC,4BACEa,EAAWU,KAAI,SAACC,EAAiBC,GAAlB,OACf,wBAAIC,IAAKD,EAAOE,QAAS,WACxBhB,EAAiB,CAChBH,SAAUgB,EACVf,UAAUC,GAAiBA,EAAcF,WAAagB,IAAmBd,EAAcD,aAGvFe,OAIHR,EAAYO,KAAI,SAACK,EAAiBH,GAAlB,OAChB,wBAAIC,IAAKD,GACPZ,EAAWU,KAAI,SAACC,EAAiBC,GAAlB,OACf,wBAAIC,IAAKD,GAAQG,EAAgBJ,cCrDlC1B,EAAYC,YAAgB,CACjC8B,KAAM,CACLC,SAAU,MAIG,aACd,IAAMlB,EAAUd,IAEhB,OACC,yBAAKwB,UAAWV,EAAQiB,MAAxB,0ECOajC,cAAO,QAAPA,CAAgBC,aAZd,SAACV,GACjB,OACC,kBAAC4C,EAAD,MACE,qBAAEhD,QAAuB,kBAACiD,EAAD,MACzB,kBAACC,EAAD,CACC5B,KAAMlB,EAAMD,MAAMG,KAAKgB,KAAKc,iB,gCCT3Be,EAAWC,IAAEC,MAAM,CACxBC,GAAIF,IAAEG,OACNC,UAAWJ,IAAEK,OACbC,SAAUN,IAAEK,OACZE,MAAOP,IAAEK,OACTG,MAAOR,IAAEK,OACTI,YAAaT,IAAEK,OACfK,QAASV,IAAEK,SAgBGT,EAbFI,IAAEC,MAAM,CACpB/B,KAAM8B,IAAEW,SAASX,IAAEY,MAAMb,GAAW,MAClCc,SAAQ,SAACC,GAAD,MAAW,CACrB3D,YAAa4D,YAAI,UAAC,WAAWC,GAAX,uEACA,OADA,SACMC,IAAMC,IAAI,yLADhB,OACXC,EADW,OAGjBL,EAAK5C,KAAOiD,EAASjD,KAAKkB,KAAI,SAACgC,GAAD,OAAcrB,EAASsB,OAAT,eACxCD,EADwC,CAE3CV,QAASU,EAASV,QAAQY,oBALV,+CCTJC,EAJDvB,IAAEC,MAAM,CACrB/C,KAAM8C,IAAEW,SAASf,EAAM,MAGHyB,OAAO,ICCtBG,EAAS,CACb,CAAC,QAASC,IAiBGC,MAdf,WACE,OACE,kBAAC,IAAD,CAAU3E,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGyE,EAAOpC,KAAI,mCAAEuC,EAAF,KAAQC,EAAR,YACV,kBAAC,IAAD,CAAOD,KAAMA,EAAMC,UAAWA,WCPtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc384a07.chunk.js","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nclass ListContainer extends React.Component {\n\tstate = {\n\t\tloading: false\n\t}\n\n\tcomponentDidMount () {\n\t\tthis.requestListData()\n\t}\n\n\trequestListData = async () => {\n\t\tconst {store} = this.props\n\n\t\ttry {\n\t\t\tthis.setState({loading: true})\n\n\t\t\tawait store.list.requestData()\n\t\t} catch (error) {\n\t\t\talert('Произошла ошибка загрузки данных! Проверьте интернет.')\n\t\t} finally {\n\t\t\tthis.setState({loading: false})\n\t\t}\n\t}\n\n\trender () {\n\t\treturn this.props.children({\n\t\t\tloading: this.state.loading\n\t\t})\n\t}\n}\n\nexport default inject('store')(observer(ListContainer))\n","import React, {useState, useMemo} from 'react'\nimport {createUseStyles} from 'react-jss'\n\nconst useStyles = createUseStyles({\n\ttable: {\n\t\tmargin: 30,\n\n\t\t'& tr td': {\n\t\t\tborder: '1px solid #ccc',\n\t\t\tmargin: 2,\n\n\t\t\t'&:hover': {\n\t\t\t\tbackground: '#f2f2f2'\n\t\t\t}\n\t\t},\n\t}\n})\n\nexport default ({data: listItems}) => {\n\tif (!listItems || !listItems.length) {\n\t\treturn null\n\t}\n\n\tconst [sortCondition, setSortCondition] = useState({\n\t\tproperty: 'id',\n\t\tincrease: true\n\t})\n\n\tconst classes = useStyles()\n\tconst properties = Object.keys(listItems[0])\n\tconst sortedItems = useMemo(() => {\n\t\tif (!sortCondition) return listItems\n\n\t\tconst sorted = listItems.slice().sort()\n\n\t\treturn sortCondition.increase ? sorted : sorted.reverse()\n\t}, [sortCondition, listItems])\n\n\treturn (\n\t\t<table className={classes.table}>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t{properties.map((currentProperty, index) => (\n\t\t\t\t\t\t<td key={index} onClick={() => {\n\t\t\t\t\t\t\tsetSortCondition({\n\t\t\t\t\t\t\t\tproperty: currentProperty,\n\t\t\t\t\t\t\t\tincrease: sortCondition && sortCondition.property === currentProperty ? !sortCondition.increase : true\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{currentProperty}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t))}\n\t\t\t\t</tr>\n\t\t\t\t{sortedItems.map((currentListItem, index) => (\n\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t{properties.map((currentProperty, index) => (\n\t\t\t\t\t\t\t<td key={index}>{currentListItem[currentProperty]}</td>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n}\n","import React, {useState, useMemo} from 'react'\nimport {createUseStyles} from 'react-jss'\n\nconst useStyles = createUseStyles({\n\troot: {\n\t\tfontSize: 16\n\t}\n})\n\nexport default () => {\n\tconst classes = useStyles()\n\n\treturn (\n\t\t<div className={classes.root}>Загружается ..</div>\n\t)\n}\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport ListContainer from 'containers/List'\n\nimport Table from 'components/Table'\nimport Loading from 'components/Loading'\n\nconst ListPage = (props) => {\n\treturn (\n\t\t<ListContainer>\n\t\t\t{({loading}) => loading ? <Loading /> : (\n\t\t\t\t<Table\n\t\t\t\t\tdata={props.store.list.data.slice()}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</ListContainer>\n\t)\n}\n\nexport default inject('store')(observer(ListPage))\n","import { types as t, getSnapshot, flow } from 'mobx-state-tree'\n\nimport axios from 'axios'\n\nconst ListItem = t.model({\n\tid: t.number,\n\tfirstName: t.string,\n\tlastName: t.string,\n\temail: t.string,\n\tphone: t.string,\n\tdescription: t.string,\n\taddress: t.string\n})\n\nconst List = t.model({\n\tdata: t.optional(t.array(ListItem), [])\n}).actions((self) => ({\n\trequestData: flow(function* (argument) {\n\t\tconst response = yield axios.get('http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}')\n\n\t\tself.data = response.data.map((dataItem) => ListItem.create({\n\t\t\t...dataItem,\n\t\t\taddress: dataItem.address.streetAddress\n\t\t}))\n\t})\n}))\n\nexport default List\n","import { types as t, getSnapshot } from 'mobx-state-tree'\n\nimport List from './List'\n\nconst Store = t.model({\n\tlist: t.optional(List, {})\n})\n\nexport default Store.create({})\n","import React from 'react'\nimport {BrowserRouter, Switch, Route, Link} from 'react-router-dom'\n\nimport ListPage from 'pages/List'\n\nimport store from 'models/Store'\n\nimport { Provider } from 'mobx-react'\n\nconst routes = [\n  ['/list', ListPage]\n]\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          {routes.map(([path, component]) => (\n            <Route path={path} component={component} />\n          ))}\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}